subtree_cmd="$1"
[ -z "$subtree_cmd" ] && exit
shift

if [ "$subtree_cmd" = "split" -a -n "$subtree_branch" ]; then
  split_branch="-b '$subtree_branch'"
else
  split_branch=
fi

if [ "$subtree_cmd" = "split" -a -n "$subtree_annotate" ]; then
  split_annotate="--annotate='$subtree_annotate'"
else
  split_annotate=
fi

if [ "$subtree_cmd" = "add" -o "$subtree_cmd" = "pull" -o "$subtree_cmd" = "push" ] && \
   [ -n "$subtree_remote" -a -n "$subtree_branch" ]; then
  remote_ref="$subtree_remote $subtree_branch"
else
  remote_ref=
fi

if [ "$subtree_cmd" = "pull" ]; then
  merge_msg="-m 'pull subtree: $subtree_prefix'"
fi

if [ "$subtree_cmd" = "merge" ]; then
  merge_msg="-m 'merge subtree: $subtree_prefix'"
fi

# $subtree_prefix holds the prefix until here
[ -z "$subtree_prefix" ] && exit
subtree_prefix="-P '$subtree_prefix'"

# won't work without eval if the subtree_prefix has '-', e.g. 'linux-3.18.x'
${shell_cmd:-eval} git subtree $subtree_cmd $subtree_prefix $split_branch $split_annotate $merge_msg $@ $remote_ref
